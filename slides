Goals: Teach people to create, test and deploy an ERC20 contract


Prerequisites:
- Install starkli
- Install foundry

---

# Basic programming concepts
## Let's get set up
We're going to start with some programming exercises from Starklings.
Go at your own pace. There will XXX minutes for this. I will be
there to answer any questions on the exercises.


Make sure you have Rust and Cargo installed with the default toolchain.
With rustup 

```
curl https://sh.rustup.rs -sSf | sh -s
```

Clone the repo and go in the directory:
- git clone `https://github.com/shramee/starklings-cairo1.git && cd starklings-cairo1`.
- Run `cargo run -r --bin starklings`, this might take a while the first time.
- You should see this intro message, `run cargo run -r --bin starklings watch`
  when you are ready!

---

# Basic programming concepts
## Fishing lesson
To solve the problems you'll need to refer to the Cairo Book. Our Grail.

```
https://book.cairo-lang.org/
```

We are going to work together up until the end of the `funtions` section.

---

# Remix

There are many tools you will need to do development of Cairo locally. If we
have time I will cover these at the end.

For now we'll learn using the remix plugin written by the good people at
Nethermind (plug, shill, cough cough)

You can install it in the extensions panel or follow this link:

```
https://remix.ethereum.org/?#activate=Starknet
```
---

# ERC20

An ERC20 standard is a 'token'


```
https://eips.ethereum.org/EIPS/eip-20
https://github.com/starknet-io/SNIPs/blob/main/SNIPS/snip-2.md
```

If you get stuck you can see a full implementation here:

```
https://github.com/OpenZeppelin/cairo-contracts/tree/main/src/token/erc20
```

---

# ERC20

```rust
#[starknet::interface]
trait IERC20<TState> {
    fn name(self: @TState) -> felt252;
    fn symbol(self: @TState) -> felt252;
    fn decimals(self: @TState) -> u8;
    fn total_supply(self: @TState) -> u256;
    fn balance_of(self: @TState, account: ContractAddress) -> u256;
    fn allowance(self: @TState, owner: ContractAddress, spender: ContractAddress) -> u256;
    fn transfer(ref self: TState, recipient: ContractAddress, amount: u256) -> bool;
    fn transfer_from(
        ref self: TState, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> bool;
    fn approve(ref self: TState, spender: ContractAddress, amount: u256) -> bool;
}
```
---

# Starknet Basics
## Storage

```rust
#[storage]
struct Storage {
    name: felt252,
    symbol: felt252,
    decimals: u8,
    total_supply: felt252,
    balances: LegacyMap::<ContractAddress, felt252>,
    allowances: LegacyMap::<(ContractAddress, ContractAddress), felt252>,
}
```

---

# Starknet Basics
## Constructor

```
#[constructor]
fn constructor(
  ref self: ContractState,
  // Whatever you want to initialise the contract
) {
  // Do things with the above, this only runs once
}
```

---

# Starknet Basics
## Events

```rust
#[event]
#[derive(Drop, starknet::Event)]
enum Event {
    Transfer: Transfer,
    Approval: Approval,
}
#[derive(Drop, starknet::Event)]
struct Transfer {
    from: ContractAddress,
    to: ContractAddress,
    value: felt252,
}
#[derive(Drop, starknet::Event)]
struct Approval {
    owner: ContractAddress,
    spender: ContractAddress,
    value: felt252,
}
```
---

# Starknet Basics
## Errors

```rust
mod Errors {
    const APPROVE_FROM_ZERO: felt252 = 'ERC20: approve from 0';
    const APPROVE_TO_ZERO: felt252 = 'ERC20: approve to 0';
    const TRANSFER_FROM_ZERO: felt252 = 'ERC20: transfer from 0';
    const TRANSFER_TO_ZERO: felt252 = 'ERC20: transfer to 0';
    const BURN_FROM_ZERO: felt252 = 'ERC20: burn from 0';
    const MINT_TO_ZERO: felt252 = 'ERC20: mint to 0';
}
```
---

# Starknet Basics
## External Functions

```
#[external(v0)]
impl ERC20Impl of IERC20<ContractState> {
}
```
---

# Starknet Basics
## Internal functions

Note this is just a pattern, you can do this in many different ways

```
#[generate_trait]
impl InternalImpl of InternalTrait {
}
```

Extra notes

- Deploying
- Testing
- SNIP process


